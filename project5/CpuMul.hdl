// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
// the CpuMul behave exactly as the same as the regular CPU.
// If the instruction is a c-instruction and instruction[14] == 0, the chip will 
// behave as follows:
//  Instruction  | 12 | 11 | 10 |
// ______________________________
// dest=D<<;jump | 0  | 1  | 1  |
// dest=A<<;jump | 0  | 1  | 0  |
// dest=M<<;jump | 1  | 1  | 0  |
// dest=D>>;jump | 0  | 0  | 1  |
// dest=A>>;jump | 0  | 0  | 0  |
// dest=M>>;jump | 1  | 0  | 0  |

CHIP CpuMul {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=muxout1); //if ins[15]==0 -> a
    Mux16(a=aregister, b=inM, sel=instruction[12], out=muxout2); // if ins[12]==0 -> a
    And(a=instruction[15], b=instruction[5], out=candwrite2a);
    Not(in=instruction[15], out=Ainstruction); //if Ainstruction -> instruction[15] == 0  
    Or(a=candwrite2a, b=Ainstruction, out=write2a);
    ARegister(in=muxout1, load=write2a, out=aregister,out[0..14]=addressM);
    //checks if d shuld be loaded
    And(a=instruction[15], b=instruction[4], out=candwrite2d);
    DRegister(in=aluout, load=candwrite2d, out=dregout);
    And(a=instruction[15], b=instruction[3], out=writeM);//if instruction[3] == 0 -> writeM == 0
    PC(in=aregister, load=jump, inc=increment, reset=reset, out[0..14]=pc);   
    //Extend Alu as alu
    ExtendAlu(x=dregout, y=muxout2, instruction=instruction[6..14], out=aluout,out=outM, zr=zr, ng=ng);
    //g func implementation:
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=instruction[1], b=zr, out=equal);
    And(a=instruction[2], b=ng, out=negativ);
    And(a=instruction[0], b=notng, out=j3andnotng);
    And(a=j3andnotng, b=notzr, out=positiv);
    Or(a=equal, b=negativ, out=or1);
    Or(a=or1, b=positiv, out=or2);
    FullAdder(a=instruction[1], b=instruction[0], c=instruction[2], sum=sum, carry=carry);
    And(a=sum, b=carry, out=sumandcarry);
    Or(a=or2, b=sumandcarry, out=jump1); //pc == a output
    And(a=jump1, b=instruction[15], out=jump);//load
    Not(in=jump, out=increment); //increment
}
