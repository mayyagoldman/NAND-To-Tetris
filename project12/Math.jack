// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        do Math.buildArray();
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            return x*-1;
        }
        return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum,shiftedX,i;
        var boolean b;
        let sum = 0;
        let i = 0;
        let shiftedX = x;
        while (~(i > 15)){
            let b = Math.bit(y,i);
            if (b){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    function void buildArray()
    //builds an array of 2^0,...,2^15
    {
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767+1;
        return;
    }


    function boolean bit(int x, int i) {
        return ~((x & twoToThe[i]) = 0);
    }



    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int signX, signY,q,i;
        let signX = 1;
        let signY = 1;
        if (x < 0)
        {
            let signX = -1;
            let x = x * -1;
        }
        if (y < 0)
        {
            let signY = -1;
            let y = y * -1;
        }
        if (y > x)
        {
            return 0;
        }
        let i = y + y;
        if (i < 0){ //overflow
            return 0;
        }
        let q = Math.divide(x,i);
        if ((x-((q+q)*y))<y){
            return (q+q)*signX*signY;
        }
        else{
            return ((q+q)+1)*signX*signY;
        }
    }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,a;
        let y = 0;
        let j = 7;
        while(j > -1){
            let a = (y + twoToThe[j])*(y + twoToThe[j]);
            if ((~(a > x))&(a>0)){
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }


    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b){
            return b;
        }
        return a;
    }
}

