// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/
// It is an extension to the specifications given in  
// https://www.nand2tetris.org (Shimon Schocken and Noam Nisan, 2017)
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0 
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array heapMap;

    /** Initializes the class. */
    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let heapMap = 0;
        let heapMap[2048] = 14334; //lenght of heap Memory
        let heapMap[2049] = 2050; //next available
        return;
    }

     /** Returns the RAM value at the given address. */
    function int peek(int address) {
    return heapMap[address];
    }
    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
    let heapMap[address] = value;
    return;
    }


    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.

        var Array currBlock;
        var Array nextBlock;
        if (size < 0) {do Sys.error(5);}
        if(size = 0) {let size = 1;}
        let currBlock = 2048; //heap base
        while((currBlock < 16383) & (currBlock[0] < size)) { //while in heap seek sufficient size block
            let nextBlock = currBlock[1]; // next available block address
            if (((currBlock[0] = 0) | (nextBlock > 16382)) | (nextBlock[0] = 0)) //if curr block size is zero or its last or the next one is zero
             {
                let currBlock = nextBlock;} //move to the next block
            else //we want to merge two blocks
            {
                let currBlock[0] = (currBlock[1] - currBlock) + nextBlock[0]; //
                if (nextBlock[1] = (nextBlock + 2)) {
                    let currBlock[1] = currBlock + 2;}
                else {
                   let currBlock[1] = nextBlock[1]; }
            }
        }
        if((currBlock+size) > 16379 ) {do Sys.error(6);}

        if(currBlock[0] > (size + 2)) //block size is to large
        {
            let currBlock[size + 2] = (currBlock[0] - size) - 2 ; // allocate new block's size
            if (currBlock[1] = (currBlock + 2)) {
                let currBlock[size + 3] = (currBlock + size) + 4; //set next available if continuous
            }
            else {let currBlock[size + 3] = currBlock[1];} //sets new block's next adress
            let currBlock[1] = (currBlock + size) + 2;}
        let currBlock[0] = 0; // block can't be used
        return currBlock + 2; //start address of allocated memory
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        // Pseudocode:
        // 1. segment = o - 1
        // 2. Insert segment into the freeLis

        var Array BlockSize;
        var Array following;
        let BlockSize = o - 2;
        let following = BlockSize[1];
        if (following[0] = 0) {let BlockSize[0] = (BlockSize[1] - BlockSize) - 2;} //following not available
        else{
            let BlockSize[0] = (BlockSize[1] - BlockSize) + following[0];
             if (following[1] = (following + 2)) {
                let BlockSize[1] = BlockSize + 2;}
             else {let BlockSize[1] = following[1];}}
        return;
    }

    /** Returns the maximal element contained in the given Array/object.
     * Assume inputs are initialized and contain at least one element. */
	function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the
        // start of the block, and this can be used to implement Memory.max.

        var Array following;
        var int size;
        var int max;
        var int currIdx;

        let following = o - 1;
        let size = following[0] - o;
        let max = 0;
        let currIdx = 1;
        while(currIdx < size) {
        if (o[currIdx] > o[max]){let max = currIdx;}
        let currIdx = currIdx + 1;}
        return o[max];


    }


}