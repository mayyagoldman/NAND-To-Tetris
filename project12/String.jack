// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int strMaxLength;
    field Array currArray;
    field int strCurrLength;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength)
     {
    if (maxLength < 0){do Sys.error(14);}
    if(maxLength > 0) {let currArray = Array.new(maxLength);}
    let strMaxLength = maxLength;
    let strCurrLength = 0;
    return this;
    }

     /** Disposes this string. */
    method void dispose()
    {
        if (strMaxLength > 0){do currArray.dispose();}
        do Memory.deAlloc(this);
        return;
    }


    /** Returns the current length of this string. */
    method int length() {
    return strCurrLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
    if (((j < 0) | (j>strCurrLength)) | (j = strCurrLength)) {do Sys.error(15);}
    return currArray[j];
    }
     /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
    if (((j < 0) | (j>strCurrLength)) | (j = strCurrLength)) {do Sys.error(16);}
    let currArray[j]  = c ;
    return;
    }
     /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
    if (strCurrLength = strMaxLength){do Sys.error(17);}
    let currArray[strCurrLength] = c;
    let strCurrLength = strCurrLength + 1;
    return this;
    }

     /** Erases the last character from this string. */
    method void eraseLastChar() {
    if (strCurrLength = 0){do Sys.error(18);}
    let strCurrLength = strCurrLength - 1;
    return;
    }

     /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
    var int currIdx;
    var int strToInt;
    var int curIntValue;
    var boolean isInt;
    var boolean isNegative;
    if (strCurrLength = 0)
        {return 0 ;}
    let isInt = true;
    //let currIdx = 0; shouldnt we initialize currIdx?
    if (currArray[0] = 45) {let isNegative = true; let currIdx = 1;}
    while((currIdx < strCurrLength) & (isInt)){
        let curIntValue = currArray[currIdx] - 48;
        let isInt = ~((curIntValue < 0) | (curIntValue > 9));
        if (isInt) {
            let strToInt =  Math.multiply(strToInt , 10) + curIntValue ;
            let currIdx = currIdx + 1;}}
    if (isNegative) {let strToInt = -strToInt;}
    return strToInt;
    }

      /** Sets this string to hold a representation of the given value. */
    method void setInt(int val){
    var int numOfDigits;
    var int lastDigit;
    var Array intToStr;
    var boolean isNegative;

    if  (strMaxLength = 0 ) {do Sys.error(19);}
    let intToStr = Array.new(6);
    if (val < 0) {
        let isNegative = true;
        let val = -val;}
    let lastDigit = val;
    while(lastDigit > 0) {
        let lastDigit = Math.divide(val , 10);
        let intToStr[numOfDigits] = 48 +(val - (Math.multiply(lastDigit , 10)));
        let numOfDigits = numOfDigits + 1;
        let val = lastDigit;}
    if (isNegative) {
            let intToStr[numOfDigits] = 45;
            let numOfDigits = numOfDigits + 1;}
    if (strMaxLength < numOfDigits){do Sys.error(19); }
    if (numOfDigits = 0 ) {
        let currArray[0] = 48;
        let strCurrLength = 1;}
    else {
        let strCurrLength = 0;
        while(strCurrLength < numOfDigits) {
            let currArray[strCurrLength] = intToStr[numOfDigits-(strCurrLength + 1)];
            let strCurrLength = strCurrLength + 1;}}
    do intToStr.dispose();
    return;

    }
   /** Returns the new line character. */
    function char newLine() {
    return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
    return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    return 34;
    }



}